import pandas as pd
from time import sleep
import os
from selenium import webdriver
from selenium.webdriver.common.by import By

def open_url_in_chrome(url, mode='headed'):
    if mode == 'headed':
        driver = webdriver.Chrome()
    elif mode == 'headless':   
        options = webdriver.ChromeOptions()
        options.add_argument('--headless')
        driver = webdriver.Chrome('./chromedriver.exe', options=options)
    
    driver.get(url)
    return driver

def get_transcript(driver, mode):
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.common.exceptions import TimeoutException
    from selenium.webdriver.common.action_chains import ActionChains

    wait = WebDriverWait(driver, 15)
    actions = ActionChains(driver)

    try:
        more_button = wait.until(EC.presence_of_element_located((By.XPATH, "/html/body/ytd-app/div[1]/ytd-page-manager/ytd-watch-flexy/div[5]/div[1]/div/div[2]/ytd-watch-metadata/div/div[4]/div[1]/div/ytd-text-inline-expander/tp-yt-paper-button[1]")))
        more_button.click()
        sleep(2)
        print("More found")
        
    except TimeoutException:
        print("No 'more' button found in description (might already be expanded).")

    try:
        print("Looking for 'Show transcript'...")
        show_transcript = wait.until(EC.element_to_be_clickable(
            (By.XPATH, "/html/body/ytd-app/div[1]/ytd-page-manager/ytd-watch-flexy/div[5]/div[1]/div/div[2]/ytd-watch-metadata/div/div[4]/div[1]/div/ytd-text-inline-expander/div[2]/ytd-structured-description-content-renderer/div[3]/ytd-video-description-transcript-section-renderer/div[3]/div/ytd-button-renderer/yt-button-shape/button")
        ))
        show_transcript.click()
        sleep(3)
        print("transcript found")
    except TimeoutException:
        print("Transcript button not found. This video might not have a transcript.")
        return ""

    print("Extracting transcript...")
    try:
        transcript_panel = wait.until(EC.presence_of_element_located(
            (By.XPATH, "/html/body/ytd-app/div[1]/ytd-page-manager/ytd-watch-flexy/div[5]/div[2]/div/div[1]/ytd-engagement-panel-section-list-renderer[5]")
        ))
        transcript = transcript_panel.text
        print("Got the text...")
        return transcript
    except Exception as e:
        print("Failed to extract transcript:", e)
        return ""


def Func(url, mode='headless'):
    driver = open_url_in_chrome(url, mode)
    transcript = get_transcript(driver, mode)
    print("Got the transcript", type(transcript))
    driver.close()
    return transcript
    	
def fetchNotes():
    # url = request.get_json("url")
    url = "https://www.youtube.com/watch?v=5tvmMX8r_OM"
    mode = 'headed'
    transcript = Func(url, mode)
    
    return transcript
    
    # print("OPENAI_API_KEY:", os.getenv("OPENAI_API_KEY"))
    
    # prompt =  f"""I am giving you subtitles of a youtube video, I want you to convert each and every line into a proper format with bullet points and sections.
    # Don't add anything extra. Here is an example generated by you from a sample subtitle, use this format while creating notes. 
    # üß† Concept: Looping Through Arrays
    # We start with an array of superheroes:
    # let heroes = ["Flash", "Batman", "Superman"];
    # To access elements using a loop:

    # üìù Key Points:
    # index starts at 0 and runs till < heroes.length.
    # If you use index <= heroes.length, it will try to access an index outside the array, which returns undefined.
    # JavaScript doesn't throw an out-of-bounds error but gives undefined.

    # ‚ö†Ô∏è Common Mistakes:
    # If you forget to increment the index

    # This creates an infinite loop because the condition never changes.

    # üîë Using break in Loops
    # If you want to stop the loop when a condition is met:

    # for (let i = 1; i <= 20; i++)
    #     .....
    # ‚úÖ Output:
    # Value of i is: 1
    # Value of i is: 2
    # Value of i is: 3
    # Value of i is: 4
    # Value of i is: 5
    # Detected 5

    # üßæ Summary:
    # Keyword	Behavior
    # break	Stops loop execution completely.
    # continue	Skips current iteration, moves to next loop.
    
    # The above was the notes format sample, here is the actual subtitle {transcript}
    
    # """

    # try:
    #     completion = client.chat.completions.create(
    #     model="gpt-4o-mini",
    #     store=True,
    #     messages=[
    #         {"role": "user", "content": prompt}
    #     ]
    #     )

    #     print("\nnnn",completion.choices[0].message)
    #     # print(response.choices[0].message.content)
    #     return "response.choices[0].message.content"
    # except Exception as e:
    #     print("‚ùå Error:", e)
    #     return "Something went wrong."

url = "https://www.youtube.com/watch?v=5tvmMX8r_OM"
mode = 'headed'
transc = fetchNotes()

    

    